#########################################
#
# CONFIGURATION FILE FOR scripts in the same directory
#
#########################################

#----------------------------------------

# Type of the firmware interface you are using
#   Accepted values: "BIOS", "UEFI"
FIRMWARE_INTERFACE="UEFI"

# Standard for the layout of partition tables
#   Accepted values: "MBR", "GPT"
PARTITIONING_STANDARD="GPT"

# NOTES FOR ABOVE ^^^
#   In your BIOS (the place where you can boot to, before booting to any media, and adjust some setting there) you are likely ot find a setting between "BIOS", "UEFI" (or "EFI") and "LEGACY".
#   BIOS:           You can use MBR partitioning standard. Doesn't require any special partition
#   LEGACY:         You can use MBR partitioning standard.
#                   Or you can use GPT partitioning standard, but that require aditional 1MB hidden partition of type "BIOS boot parition" at the beginning of the disk.
#   UEFI (or EFI):  You always need an EFI parition (with FAT filesystem) which must be mounted into "/boot/efi" in your OS.
#                   You can use both MBR or GPT paritions layout, but the MBR doesn't really makes sense if you have GPT available.
#
#                   The special paritions will be automaticly created for you. I'm just explaining it there so you know they will be there.

#----------------------------------------

# Device which will be formated, paritioned and the system will be installed on it
#   Accepted values: path to the device
#   NOTE: /dev/sda should be default in common cases, when you have a hard drive attached and booting from USB.
#         But you may find usefull to be able to set a different target device. Look inside your current /dev/ to see what's available.
#         Never choose the media you booted from.
DEVICE=/dev/sda

#----------------------------------------

# Paritions sizes
#   those values are later use in the 'sfdisk' utility. "<size><unit>"

# Set up the partitions sizes, filesystems, labels, and mountpoints you want.
#   Start the arrays form 1, so there will be space in case of some special partition needed;
#   Keep the indexes synced
#   Keep filesystems names lowercase. Later, 'mkfs.$PARTITION_FILESYSTEMS[i]' will be called, so look into your /usr/sbin/, which FS are supported
#   !! IMPORTANT !! : mountpoints paths MUST end with '/'. You can be assured it will break the script if you won't follow this instruction.
PARTITION_SIZES=(        [1]="2T" )
PARTITION_FILESYSTEMS=(  [1]="btrfs" )
PARTITION_LABELS=(       [1]="BTRFS" )
PARTITION_MOUNTPOINTS=(  [1]="/"    )

#----------------------------------------

# Set up a mountpoint path, where to mount the prepared disks
# If such directory already exists, IT WILL BE REMOVED and created again
MOUNTPOINT=/mnt/NEW_SYSTEM

#----------------------------------------

#########################################
#
# DO NOT TOUCH !!
# This includes automaticly generated configuration based on your input above
source ./autogenerated_configuration.sh
# DO NOT TOUCH !!
#
#########################################
